// PROG4.max - Joshua Gregory (Mar. 2024)
    // Using only one Input OpCode, prompts input values for variables A & B. 
    // Halts only if A == 0. Reprompts for A if A > 94 & for B if B > A.
    // Adds B + 4 to get S. Checks S parity & adds S + 1 if S = odd.
    // Subtracts A - S to get value for N. Outputs each variable.
    // Restarts & continues to run until A input == 0.

Start,        JnS            GetA         // Subr 0: Halt if A <= 0, input A until A <= 94
              JnS            GetB         // Subr 1: Input B until B <= A
              JnS            Add4         // Subr 2: Sum B + 4 = S
              JnS            CheckPar     // Subr 3: Check S parity
              JnS            SubtS        // Subr 4: Sub A - S = N
              JnS            LogVar       // Subr 5: Print vars
              Jump           Start        // Restart until A == 0.

// SUBR 0a: Input A, halt if A <= 0, reloop if A > 94, cont if 0 < A <= 94:
GetA,         Hex            0
ReloopA,      Input
              Store          A            // A = AC
              SkipCond       800          // If A > 0,
              Halt                        // Else: halt if A <= 0
              Load           Upper        // Then, AC = 94
              Sub            A            // AC = Upper - A
              SkipCond       000          // If AC < 0,
              JumpI          GetA         // Else: 0 < A <= 94, exit subr
              Jump           ReloopA      // Then A > 94, reloop

// SUBR 1: Input B, reloop if B > A, cont if B <= A:
GetB,         Hex            0
ReloopB,      Input
              Store          B            // B = AC
              Load           A            // AC = A
              Sub            B            // AC = A - B
              SkipCond       000          // If AC < 0,
              JumpI          GetB         // Else: B <= A, exit subr
              Jump           ReloopB      // Then B > A, reloop

// SUBR 2: Add B + 4 to get value of S:
Add4,         Hex           0
              Load          B             // AC = B
              Add           Four          // AC = B + 4
              Store         S             // S = AC
              Store         S2            // Use S2 to find S parity
              JumpI         Add4          // Exit subr

// SUBR 3: If S2 = odd, then add S + 1, else continue:
CheckPar,     Hex           0
IfNeg,        SkipCond      000           // Start loop, check if S2 < 0
              Jump          IfZero        // Else: check if S2 == 0
              Jump          IsOdd         // Then S2 < 0 so S = odd
IfZero,       SkipCond      400           // S2 !< 0, check if S2 == 0
              Jump          IsPos         // Else: S2 > 0
              JumpI         CheckPar      // Then S = even, exit subr
IsPos,        Sub           Two           // If S2 > 0, decrement by 2
              Store         S2            // Update S2
              Jump          IfNeg         // Reloop
IsOdd,        Load          S             // S2 < 0 so S = odd
              Add           One           // S += 1 so S = even
              Store         S             // Update S
              JumpI         CheckPar      // S = even, exit subr

// SUBR 4: Sub A - S to get value of N:
SubtS,        Hex           0
              Load          A             // AC = A
              Sub           S             // AC = A - S
              Store         N             // N = AC
              JumpI         SubtS         // Exit subr

// SUBR 5: Output each variable separately:
LogVar,       Hex           0
              Load          A             // AC = A
              Output
              Load          B             // AC = B
              Output
              Load          S             // AC = S
              Output
              Load          N             // AC = N
              Output
              JumpI         LogVar        // Exit subr

// VARIABLE DECLARATIONS:
A,            Dec           000
B,            Dec           000
N,            Dec           000
S,            Dec           000
S2,           Dec           000
One,          Dec           001
Two,          Dec           002
Four,         Dec           004
Upper,        Dec           094
              End           Start
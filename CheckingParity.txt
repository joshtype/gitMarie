// CheckingParity.max - Joshua Gregory (Feb. 2024)
// Takes two inputs, A & B, where A <= 94 and B <= A. B + 4 = S.
// Checks if S = even or odd. Adds S + 1 if odd. A - S = N.
// Outputs A, B, S, N separately. Repeats until input A < 0.

Start,        Input
              SkipCond       800       // Check if input > 0
              Halt                     // Halt if AC <= 0
              Store          A
              JnS            Upper     // Sub 0: Check if A <= 94
              Input
              Store          B
              JnS            Lower     // Sub 1: Check if B <= A
              JnS            Add4      // Sub 2: Sum B + 4
              Store          S
              Store          S2        // Copy S to test parity
              JnS            Parity    // Sub 3: Check S parity
              Load           A
              JnS            SubtS     // Sub 4: Subtract A - S
              Load           A
              JnS            LogVar    // Sub 5: Display variables
              Jump           Start

// SUBROUTINE 0: ENSURE UPPER BOUND A <= Max (94).
Upper,        Hex            0
              Load           Max
              Sub            A         // AC = Max - A
              SkipCond       000       // If Max - A < 0, then A > 94
              Jump           ReturnA   // Else, A <= 94, exit subroutine
              Load           Max      
              Store          A         // If A > 94, set A = 94
ReturnA,      JumpI          Upper     // Exit subroutine

// SUBROUTINE 1: ENSURE LOWER BOUND B <= A.
Lower,        Hex            0
              Load           A
              Sub            B         // AC = A - B
              SkipCond       000       // If A - B < 0, then B > A
              Jump           ReturnB   // else, B <= A, exit subroutine
              Load           A
              Store          B         // If B > A, set B = A
ReturnB,      JumpI          Lower     // Exit subroutine
              

// SUBROUTINE 2: ADD B + 4 = S.
Add4,         Hex           0
              Add           Four
              JumpI         Add4       // Exit subroutine

// SUBROUTINE 3: CHECK PARITY OF S2
Parity,       Hex           0
Neg,          SkipCond      000        // Check if S2 is negative.
              Jump          Zero       // If S2 >= 0, check if S2 == 0
              Jump          IsOdd      // If S2 < 0, then S = odd, e

Zero,         SkipCond      400        // Check if S2 equals zero.
              Jump          Decmt      // If S2 != or !< 0, then S2 > 0
              Jump          IsEven     // If S2 == 0, then S = even

Decmt,        Sub           Two        // If S2 > 0, decrement by 2
              Store         S2         // Update value
              Jump          Neg        // Reloop

IsOdd,        Load          S         
              Add           One        // If S2 is odd, add 1
              Store         S
IsEven,       JumpI         Parity     // Exit subroutine

// SUBROUTINE 4: SUBTRACT A - S = N.
SubtS,         Hex          0
               Sub          S
               JumpI        SubtS      // Exit subroutine

// SUBROUTINE 5: DISPLAY VARIABLES ON SEPARATE LINES.
LogVar,       Hex           0
              Output
              Load          B
              Output
              Load          S
              Output
              Load          N
              Output
              JumpI         LogVar     // Exit subroutine

// VARIABLE DECLARATIONS.
A,            Dec           000       
B,            Dec           000
N,            Dec           000
S,            Dec           000
S2,           Dec           000
One,          Dec           001
Two,          Dec           002
Four,         Dec           004
Max,          Dec           094
              End           Start




